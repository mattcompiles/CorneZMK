#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;

            label = "SHIFT_CAPS";
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
            tapping-term-ms = <280>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 22 36 37 23 8 9 24 38 39 25 10 11 26 40 41 27 12>;
            bindings = <&kp>, <&kp>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
            tapping-term-ms = <280>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33>;
            bindings = <&kp>, <&kp>;
        };

        brkl: brkl {
            compatible = "zmk,behavior-mod-morph";
            label = "PAREN_BRACKET_LEFT";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LEFT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        brkr: brkr {
            compatible = "zmk,behavior-mod-morph";
            label = "PAREN_BRACKET_RIGHT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    combos {
        compatible = "zmk,combos";

        raycast_left {
            bindings = <&kp LG(SPACE)>;
            key-positions = <14 17>;
        };

        raycast_right {
            bindings = <&kp LG(SPACE)>;
            key-positions = <23 26>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB     &kp Q            &kp W            &kp E              &kp R         &kp T                                       &kp UP                &kp Y       &kp U         &kp I               &kp O             &kp P                     &kp MINUS
&kp ESCAPE  &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LEFT_SHIFT D  &hml LCTRL F  &kp G                             &kp LEFT  &kp ENTER  &kp RIGHT  &kp H       &hmr RCTRL J  &hmr RIGHT_SHIFT K  &hmr RIGHT_ALT L  &hmr RIGHT_GUI SEMICOLON  &kp SQT
&caps_word  &kp Z            &kp X            &kp C              &kp V         &kp B            &kp LG(LS(A))              &kp DOWN              &kp N       &kp M         &kp COMMA           &kp DOT           &kp FSLH                  &none
                                              &mo 3              &lt 2 SPACE   &lt 1 BACKSPACE                                                   &kp DELETE  &kp ENTER     &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        number_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &kp N4  &kp N5  &kp N6  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &kp N0  &trans
            >;

            label = "NUMBER";
        };

        symbol_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &kp EXCLAMATION  &brkl           &brkr             &kp AMPERSAND  &kp HASH   &kp BACKSLASH
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &kp CARET        &kp LEFT_BRACE  &kp RIGHT_BRACE   &kp DOLLAR     &kp EQUAL  &kp AT_SIGN
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &kp GRAVE        &kp LESS_THAN   &kp GREATER_THAN  &kp PERCENT    &kp TILDE  &kp ASTERISK
                        &trans  &trans  &trans                                    &trans           &trans          &trans
            >;

            label = "SYMBOL";
        };

        navigation_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans                     &kp LG(LEFT)  &kp LA(LEFT)  &kp LA(RIGHT)  &kp LG(RIGHT)  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &ext_power EP_TOG  &trans  &kp LEFT      &kp DOWN      &kp UP         &kp RIGHT      &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans                     &trans        &trans        &trans         &trans         &trans  &trans
                        &trans  &trans  &trans                                               &trans        &trans        &trans
            >;

            label = "NAV";
        };
    };
};
